---
// Composant pour afficher une liste déroulante avec données chargées dynamiquement
// Utilisé dans les formulaires pour les champs liés à des entités distantes (catégories, emplacements)
import { fetchRemoteData, sortItems, generateUniqueId } from '../utils/selectRemoteHelpers';

const { label, endpoint, valueKey, labelKey, name, required = false, selectedValue = '', className = '' } = Astro.props;

// Récupération des données depuis l'API
let rawItems = await fetchRemoteData(endpoint);
let items = sortItems(rawItems, labelKey);

// Génération d'un ID unique pour le champ
const fieldId = generateUniqueId(name);
---

<div class={`form-field ${className}`}>
  <label for={fieldId} class="block text-sm uppercase tracking-retro mb-1 font-bold">
    {label}
    {required && <span class="text-rust ml-1">*</span>}
  </label>
  
  <div class="relative">
    <!-- Select avec style rétro Neo-Memphis -->
    <select 
      id={fieldId}
      name={name}
      class="w-full py-2 px-3 bg-cream border border-night/30 text-sm font-mono focus:border-petrol focus:ring-1 focus:ring-petrol/30 appearance-none neo-select"
      required={required}
    >
      <option value="" disabled selected={!selectedValue}>Sélectionner...</option>
      
      {Array.isArray(items) && items.map((item) => {
        // Gestion des structures plates ou imbriquées (Strapi)
        const value = item[valueKey] ?? item.attributes?.[valueKey] ?? item.id;
        const label = item[labelKey] ?? item.attributes?.[labelKey] ?? `[${labelKey} manquant]`;
        return (
          <option 
            value={value} 
            selected={!!selectedValue && value?.toString() === selectedValue.toString() ? true : undefined}
          >
            {label}
          </option>
        );
      })}
    </select>
    
    <!-- Flèche stylisée Neo-Memphis pour le select -->
    <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-night">
      <svg class="w-4 h-4 fill-current" viewBox="0 0 20 20">
        <path d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 011.414 1.414l-4 4a1 1 01-1.414 0l-4-4a1 1 010-1.414z"></path>
      </svg>
    </div>
  </div>
  
  {/* Message d'erreur lorsque les données ne peuvent pas être chargées */}
  {items.length === 0 && (
    <p class="text-rust text-xs mt-1">
      Impossible de charger les données. Vérifiez que l'API est accessible.
    </p>
  )}
</div>

<style>
  .neo-select {
    transition: all 0.2s ease;
    border-radius: 0;
  }
  
  .neo-select:focus {
    outline: none;
    box-shadow: 3px 3px 0 rgba(13, 75, 89, 0.1);
    transform: translate(-1px, -1px);
  }
  
  .form-field {
    margin-bottom: 1.5rem;
  }
</style>
