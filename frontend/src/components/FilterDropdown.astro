---
// Simple dropdown component that fetches data from an API endpoint
import { fetchRemoteData } from '../utils/selectRemoteHelpers';

export interface SelectProps {
  label: string;
  endpoint: string;
  valueKey: string;
  labelKey: string;
  name: string;
  required?: boolean;
  selectedValue?: string;
  className?: string;
}

const props = Astro.props as SelectProps;
const { 
  label, 
  endpoint, 
  valueKey, 
  labelKey, 
  name, 
  required = false, 
  selectedValue = '', 
  className = '' 
} = props;

// Fetch and prepare data
const data = await fetchRemoteData(endpoint);
const items = [...data].sort((a, b) => {
  const labelA = (a[labelKey] ?? a.attributes?.[labelKey] ?? '').toString();
  const labelB = (b[labelKey] ?? b.attributes?.[labelKey] ?? '').toString();
  return labelA.localeCompare(labelB);
});

// Generate ID
const fieldId = `field-${name}-${Math.floor(Math.random() * 1000000)}`;
---

<div class:list={['form-field', className]}>
  <label for={fieldId} class="block text-sm uppercase tracking-retro mb-1 font-bold">
    {label}
    {required && <span class="text-rust ml-1">*</span>}
  </label>
  
  <div class="relative">
    <select 
      id={fieldId}
      name={name}
      class="w-full py-2 px-3 bg-cream border border-night/30 text-sm font-mono focus:border-petrol focus:ring-1 focus:ring-petrol/30 appearance-none neo-select"
      required={required}
    >
      <option value="" disabled selected={!selectedValue}>Sélectionner...</option>
      
      {items.map((item) => {
        const value = item[valueKey] ?? item.attributes?.[valueKey] ?? item.id;
        const label = item[labelKey] ?? item.attributes?.[labelKey] ?? `[${labelKey} manquant]`;
        return (
          <option 
            value={value} 
            selected={selectedValue && value?.toString() === selectedValue.toString()}
          >
            {label}
          </option>
        );
      })}
    </select>
    
    <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-night">
      <svg class="w-4 h-4 fill-current" viewBox="0 0 20 20">
        <path d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 011.414 1.414l-4 4a1 1 01-1.414 0l-4-4a1 1 010-1.414z"></path>
      </svg>
    </div>
  </div>
  
  {items.length === 0 && (
    <p class="text-rust text-xs mt-1">
      Impossible de charger les données. Vérifiez que l'API est accessible.
    </p>
  )}
</div>

<style>
  .neo-select {
    transition: all 0.2s ease;
    border-radius: 0;
  }
  
  .neo-select:focus {
    outline: none;
    box-shadow: 3px 3px 0 rgba(13, 75, 89, 0.1);
    transform: translate(-1px, -1px);
  }
  
  .form-field {
    margin-bottom: 1.5rem;
  }
</style>
