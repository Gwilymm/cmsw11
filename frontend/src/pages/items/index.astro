---
import BaseLayout from '../../layouts/BaseLayout.astro';
import ItemCard from '../../components/ItemCard.astro';
import '../../styles/global.css';

interface Category {
  id: number;
  name: string;
}

interface Location {
  id: number;
  name: string;
}

interface Item {
  id: number;
  name: string;
  quantity: number;
  unit?: string;
  expiryDate?: string;
  notes?: string;
  imageUrl?: string;
  category?: Category;
  location?: Location;
}

// 1) Récupère et « aplatit » les items
async function fetchItems(): Promise<Item[]> {
  const res = await fetch('http://localhost:1337/api/items?populate=*');
  const json = await res.json();
  if (!json.data || !Array.isArray(json.data)) return [];
  return json.data.map((entry: any) => {
    // Strapi retourne déjà les champs en flat, pas sous "attributes"
    const cat = entry.category;
    const loc = entry.storage_location;
    return {
      id: entry.id,
      name: entry.name,
      quantity: entry.quantity,
      unit: entry.unit || undefined,
      expiryDate: entry.expiration_date || undefined,
      imageUrl: entry.image?.data?.url
        ? `http://localhost:1337${entry.image.data.url}`
        : undefined,
      category: cat
        ? { id: cat.id, name: cat.name }
        : undefined,
      location: loc
        ? { id: loc.id, name: loc.name }
        : undefined
    };
  });
}

// 2) Récupère toutes les catégories (pour le filtre)
async function fetchCategories(): Promise<Category[]> {
  const res = await fetch('http://localhost:1337/api/categories?pagination[pageSize]=100');
  const json = await res.json();
  if (!json.data || !Array.isArray(json.data)) return [];
  return json.data.map((c: any) => ({
    id: c.id,
    name: c.name
  }));
}

// 3) Récupère tous les lieux (pour le filtre)
async function fetchLocations(): Promise<Location[]> {
  const res = await fetch('http://localhost:1337/api/locations?pagination[pageSize]=100');
  const json = await res.json();
  if (!json.data || !Array.isArray(json.data)) return [];
  return json.data.map((l: any) => ({
    id: l.id,
    name: l.name
  }));
}

let items: Item[] = [];
let categories: Category[] = [];
let locations: Location[] = [];
let error: string | null = null;

try {
  items = await fetchItems();
  categories = await fetchCategories();
  locations = await fetchLocations();
} catch (e) {
  console.error(e);
  error = "Impossible de se connecter à l'API Strapi. Vérifiez que le serveur tourne sur localhost:1337.";
}

// Lecture des filtres dans l'URL
const { searchParams } = Astro.url;
const categoryFilter = searchParams.get('category');
const locationFilter = searchParams.get('location');

// Applique les filtres
let filteredItems = items;
if (categoryFilter) {
  filteredItems = filteredItems.filter(i => i.category?.id.toString() === categoryFilter);
}
if (locationFilter) {
  filteredItems = filteredItems.filter(i => i.location?.id.toString() === locationFilter);
}

// Trie alphabétique pour les selects
const uniqueCategories = categories.sort((a,b) => a.name.localeCompare(b.name));
const uniqueLocations  = locations.sort((a,b) => a.name.localeCompare(b.name));

// Pagination: 10 items par page
const pageParam = searchParams.get('page');
const currentPage = pageParam ? parseInt(pageParam) : 1;
const itemsPerPage = 10;
const totalPages = Math.ceil(filteredItems.length / itemsPerPage);
const startIndex = (currentPage - 1) * itemsPerPage;
const pageItems = filteredItems.slice(startIndex, startIndex + itemsPerPage);

// Classes de pagination
const activePageClass = 'bg-slate-200 text-cream border-petrol';
const inactivePageClass = 'bg-cream text-night border-night/30 hover:bg-night/5';
---

<BaseLayout title="Articles – Économat" description="Inventaire des articles">
  <div class="mb-8 md:mb-12">
    <h2 class="text-2xl md:text-3xl font-bold mb-4 tracking-retro uppercase">
      <span class="text-petrol">[</span> CATALOGUE <span class="text-rust">]</span>
    </h2>
    <p class="opacity-80 max-w-2xl">
      Filtrez par catégorie ou lieu de stockage ci-dessous.
    </p>
  </div>

  <!-- Filtres -->
  <div class="bg-night/5 p-4 md:p-6 mb-8 flex flex-wrap items-center gap-4">
    <label class="text-xs uppercase tracking-retro">
      Catégorie
      <select
        class="ml-2 py-1 px-3 bg-cream border border-night/30 text-sm font-mono focus:border-petrol"
        onchange="location.href=this.value"
      >
        <option value="/items">Toutes</option>
        {uniqueCategories.map(cat => (
          <option
            value={`/items?category=${cat.id}${locationFilter?`&location=${locationFilter}`:''}`}
            selected={categoryFilter===cat.id.toString()}
          >
            {cat.name}
          </option>
        ))}
      </select>
    </label>

    <label class="text-xs uppercase tracking-retro">
      Lieu
      <select
        class="ml-2 py-1 px-3 bg-cream border border-night/30 text-sm font-mono focus:border-petrol"
        onchange="location.href=this.value"
      >
        <option value={`/items${categoryFilter?`?category=${categoryFilter}`:''}`}>Tous</option>
        {uniqueLocations.map(loc => (
          <option
            value={`/items?location=${loc.id}${categoryFilter?`&category=${categoryFilter}`:''}`}
            selected={locationFilter===loc.id.toString()}
          >
            {loc.name}
          </option>
        ))}
      </select>
    </label>

    {(categoryFilter || locationFilter) && (
      <a
        href="/items"
        class="ml-auto text-xs uppercase px-3 py-1.5 border border-night/20 hover:bg-night hover:text-cream transition"
      >
        Réinitialiser
      </a>
    )}
  </div>

  {error ? (
    <div class="bg-rust/10 border-l-4 border-rust p-4 mb-8">
      {error}
    </div>
  ) : pageItems.length === 0 ? (
    <div class="p-8 mb-8 text-center bg-night/5 border border-night/20">
      Aucun article ne correspond aux filtres.
    </div>
  ) : (
    <div class="grid grid-cols-1 gap-6">
      {pageItems.map(item => (
        <ItemCard
          id={item.id}
          name={item.name}
          quantity={item.quantity}
          unit={item.unit}
          category={item.category}
          location={item.location}
          expiryDate={item.expiryDate}
          imageUrl={item.imageUrl}
        />
      ))}
    </div>
  )}

  <!-- Boutons Suivant / Précédent -->
  <div class="mt-8 flex justify-center items-center space-x-4">
    {/* Bouton Précédent toujours visible */}
    <a
      href={currentPage > 1
        ? `/items?page=${currentPage - 1}${categoryFilter ? `&category=${categoryFilter}` : ''}${locationFilter ? `&location=${locationFilter}` : ''}`
        : '#'}
      class={
        `px-4 py-2 font-bold uppercase tracking-retro transition ` +
        (currentPage > 1
          ? 'bg-petrol text-cream hover:bg-rust'
          : 'bg-cream text-night cursor-not-allowed opacity-50')
      }
    >
      Précédent
    </a>

    {/* Numéros de pages si plus de 1 page */}
    {totalPages > 1 && (
      <nav class="flex justify-center space-x-2">
        {Array.from({ length: totalPages }).map((_, idx) => {
          const pageNum = idx + 1;
          const href = `/items?page=${pageNum}${categoryFilter ? `&category=${categoryFilter}` : ''}${locationFilter ? `&location=${locationFilter}` : ''}`;
          const isActive = pageNum === currentPage;
          return (
            <a
              href={href}
              class={`px-3 py-1 border-2 ${isActive ? activePageClass : inactivePageClass}`}
            >
              {pageNum}
            </a>
          );
        })}
      </nav>
    )}

    {/* Bouton Suivant toujours visible */}
    <a
      href={currentPage < totalPages
        ? `/items?page=${currentPage + 1}${categoryFilter ? `&category=${categoryFilter}` : ''}${locationFilter ? `&location=${locationFilter}` : ''}`
        : '#'}
      class={
        `px-4 py-2 font-bold uppercase tracking-retro transition ` +
        (currentPage < totalPages
          ? 'bg-petrol text-cream hover:bg-rust'
          : 'bg-cream text-night cursor-not-allowed opacity-50')
      }
    >
      Suivant
    </a>
  </div>

  <div class="mt-12 text-center">
    <a
      href="/items/new"
      class="px-6 py-2 bg-petrol text-cream font-bold uppercase tracking-retro hover:bg-rust transition"
    >
      + Ajouter un article
    </a>
  </div>
</BaseLayout>

<script is:inline>
  // SI vous utilisez un JWT côté client
  if (!localStorage.getItem('jwt')) location.href = '/auth/login';
</script>

<style>
  select {
    appearance: none;
    padding-right: 2rem;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor'%3E%3Cpath d='M2 5l6 6 6-6z'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 0.5rem center;
    background-size: 16px 12px;
  }
</style>
